name: Install MODFLOW executables
description: Install & cache MODFLOW executables from the MODFLOW-USGS/executables repository
inputs:
  path:
    description: Path to store the executables (e.g. a bin directory)
    required: true
  github_token:
    description: GitHub API access token
    required: true
  repo:
    description: The repository to install executables from ('executables', 'modflow6', or 'modflow6-nightly-build')
    required: false
    default: executables
outputs:
  cache-hit:
    description: Whether MODFLOW executables were restored from the cache.
    value: ${{ steps.cache_executables.outputs.cache-hit }}
runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Create bin directory
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          mkdir -p "${{ inputs.path }}"
        else
          mkdir -p ${{ inputs.path }}
        fi

    - name: Check release
      shell: bash
      run: |
        # get info for the executables repository's latest release
        release_json=$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GH_TOKEN }}" "https://api.github.com/repos/MODFLOW-USGS/${{ inputs.repo }}/releases/latest") || echo "No release to check, skipping"

        # get asset ID of the release's metadata file, if one exists
        get_asset_id="
        import json
        import sys
        pattern = 'code.json'
        release = json.load(sys.stdin, strict=False)
        metadata = next(iter([a for a in release['assets'] if a['name'] == pattern]), None)
        print(dict(metadata)['id'] if metadata else '')
        "
        asset_id=$(echo "$release_json" | python -c "$get_asset_id") || echo "No release to check, skipping"

        # asset_id is empty if metadata file asset wasn't found
        if [ ${#asset_id} -gt 0 ]; then
           curl -H "Accept: application/octet-stream" -H "Authorization: Bearer $GH_TOKEN }}" "https://api.github.com/repos/MODFLOW-USGS/${{ inputs.repo }}/releases/assets/$asset_id" >> code.json
        else
          # give hashFiles an empty file to hash
          touch code.json
        fi
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Cache executables
      id: cache_executables
      uses: actions/cache@v3
      with:
        path: ${{ inputs.path }}
        key: modflow-exes-${{ runner.os }}-${{ inputs.repo }}-${{ hashFiles('code.json') }}

    - name: Install executables
      if: steps.cache_executables.outputs.cache-hit != 'true'
      shell: bash
      run: |
        if command -v get-modflow &> /dev/null
        then
          echo "get-modflow command is available (FloPy is probably installed)"
          if [ "$RUNNER_OS" == "Windows" ]; then
            get-modflow "${{ inputs.path }}" --repo ${{ inputs.repo }}
          else
            get-modflow ${{ inputs.path }} --repo ${{ inputs.repo }}
          fi
        else
          echo "downloading get-modflow script"
          script_path="$RUNNER_TEMP/get_modflow.py"

          curl https://raw.githubusercontent.com/modflowpy/flopy/develop/flopy/utils/get_modflow.py -o "$script_path"

          if [ "$RUNNER_OS" == "Windows" ]; then
            python $script_path "${{ inputs.path }}" --repo "${{ inputs.repo }}"
          else
            python $script_path ${{ inputs.path }} --repo "${{ inputs.repo }}"
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Add executables to path
      if: runner.os != 'Windows'
      shell: bash
      run: |
        normalized="`cd "${{ inputs.path }}";pwd`"
        echo "$normalized" >> $GITHUB_PATH

    - name: Add executables to path (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $normalized = $(Resolve-Path ${{ inputs.path }}).ToString()
        echo $normalized | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append